// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go
//
// Generated by this command:
//
//	mockgen -source=auth_service.go -destination=../../tests/mocks/auth_service_mock.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthServiceI is a mock of AuthServiceI interface.
type MockAuthServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceIMockRecorder
}

// MockAuthServiceIMockRecorder is the mock recorder for MockAuthServiceI.
type MockAuthServiceIMockRecorder struct {
	mock *MockAuthServiceI
}

// NewMockAuthServiceI creates a new mock instance.
func NewMockAuthServiceI(ctrl *gomock.Controller) *MockAuthServiceI {
	mock := &MockAuthServiceI{ctrl: ctrl}
	mock.recorder = &MockAuthServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceI) EXPECT() *MockAuthServiceIMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthServiceI) Authenticate(username, pass string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", username, pass)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServiceIMockRecorder) Authenticate(username, pass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthServiceI)(nil).Authenticate), username, pass)
}
